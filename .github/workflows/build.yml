# 工作流的名称，会显示在 GitHub Actions 页面
name: Build Android APK

# 定义触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches: [ "main" ]
  # 当有针对 main 分支的 Pull Request 时触发
  pull_request:
    branches: [ "main" ]

# 定义工作流中的任务
jobs:
  build:
    # 指定任务运行在最新版的 Ubuntu 虚拟环境上
    runs-on: ubuntu-latest

    # 任务的执行步骤
    steps:
      # 步骤 1: 检出（下载）你的仓库代码到虚拟环境中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Java 开发环境 (JDK)，这是安卓构建所必需的
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 步骤 3: 设置 Flutter SDK 环境
      # 使用一个社区维护的、非常流行的 Action 来安装 Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # 使用稳定版的 Flutter
          cache: true       # 启用缓存，加快后续的构建速度

      # 步骤 4: 安装项目的所有依赖项 (根据 pubspec.yaml 文件)
      - name: Install dependencies
        run: flutter pub get

      # 步骤 5: 执行 Flutter 构建命令来生成 release 版本的 APK
      - name: Build APK
        run: flutter build apk --release

      # 步骤 6: 上传构建好的 APK 文件作为产物 (Artifact)
      # 这样你就可以在工作流运行结束后下载它
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          # 设置产物的名称
          name: release-apk
          # 指定要上传的 APK 文件路径
          path: build/app/outputs/flutter-apk/app-release.apk
