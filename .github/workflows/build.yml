# 工作流的名称，会显示在 GitHub Actions 页面的左侧列表
name: 安卓构建流程

# 触发此工作流的事件
on:
  # 1. 当有代码推送到 main 或 master 分支时触发
  push:
    branches: [ "main", "master" ]
  # 2. 当有针对 main 或 master 分支的 Pull Request 时触发
  pull_request:
    branches: [ "main", "master" ]
  # 3. 允许你从 Actions 页面手动触发此工作流
  workflow_dispatch:

# 定义工作流中的任务 (jobs)
jobs:
  # 我们只定义一个名为 "build" 的任务
  build:
    # 指定任务运行的虚拟机环境。'ubuntu-latest' 是安卓构建的推荐环境
    runs-on: ubuntu-latest

    # 任务的执行步骤
    steps:
      # 第 1 步：检出代码
      # 使用官方的 actions/checkout@v4 来获取你仓库的最新代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 第 2 步：设置 Java 环境
      # 安卓开发需要 Java 环境。这里我们使用 JDK 17，这是目前安卓开发的主流版本。
      # 如果你的项目需要其他版本（如 11），可以修改 'java-version' 的值。
      - name: 设置 JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 第 3 步：设置 Gradle
      # 这一步会自动配置好 Gradle 环境，并且会缓存 Gradle 的依赖项。
      # 缓存可以极大提升后续构建的速度，非常重要。
      - name: 配置 Gradle 缓存
        uses: actions/setup-gradle@v3

      # 第 4 步：授予 gradlew 执行权限
      # 在 Linux/macOS 环境下，需要给 gradlew 脚本添加可执行权限才能运行
      - name: 授予 gradlew 执行权限
        run: chmod +x ./gradlew

      # 第 5 步：执行构建
      # 运行 gradle 命令来编译项目并打包 APK。
      # 'assembleRelease' 会构建 release 版本的 APK。
      # 如果你只想构建 debug 版本用于测试，可以换成 './gradlew assembleDebug'
      - name: 使用 Gradle 构建
        run: ./gradlew assembleRelease

      # 第 6 步：上传构建产物 (APK)
      # 构建成功后，APK 文件会存在于虚拟机中。此步骤会将其上传到 GitHub。
      # 你就可以在 Actions 的运行结果页面方便地下载它。
      - name: 上传 APK 文件
        uses: actions/upload-artifact@v4
        with:
          # 上传的产物名称，可以自定义
          name: app-release.apk
          # 要上传的文件的路径
          # 'app/build/outputs/apk/release/app-release.apk' 是 release APK 的标准路径。
          # 注意：如果你的应用模块名称不是 'app'，请修改此路径。
          path: app/build/outputs/apk/release/app-release.apk
